//---------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Unchase OData V3 Client Extensions T4 Template.
//     Template Version: 1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if the
//     code is regenerated.
//
//	   Copyright (c) 2018 Unchase (https://github.com/unchase). 
//
//     All rights reserved.
//
//     MIT License
//     Permission is hereby granted, free of charge, to any person obtaining a                 
//     copy of this software and associated documentation files (the "Software"),
//     to deal in the Software without restriction, including without limitation
//     the rights to use, copy, modify, merge, publish, distribute, sublicense,
//     and/or sell copies of the Software, and to permit persons to whom the
//     Software is furnished to do so, subject to the following conditions:
//
//     The above copyright notice and this permission notice shall be included in
//     all copies or substantial portions of the Software.
//     
//     THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                   
//     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//     DEALINGS IN THE SOFTWARE.
//
//     Original file name: "ODataV3ExtensionsT4CodeGenerator.tt"
//     Generation date: 2019-09-27 08:54:15
//
// </auto-generated>
//---------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Services.Client;
using System.Threading.Tasks;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

namespace WSCAVModel
{
    #region Enums
    public enum HttpMethod
    {
        GET,

        POST
    }
	#endregion

	#region OData StandartResponse
	public class ODataStandartResponse
    {
		// "-1" - Application exception
		// "0" - No error
		// Others - OData error
        public string ErrorCode { set; get; }

        public string ErrorMessage { set; get; }

        public ODataStandartResponse() : this("0", null) { }

        public ODataStandartResponse(string errorCode, string errorMessage)
        {
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
        }
    }
	#endregion

	public static class Extensions
	{
		#region Internal methods

		#region Attributes
        [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
        internal class ExpandToParametersAttribute : Attribute { }
        #endregion

        #region ToODataParametersList
        internal static List<(string ParameterName, object ParameterValue)> ToODataParametersList<T>(this T obj, bool objectAsParameter = false, string parameterName = "Entity") where T : class
        {
            var result = new List<(string, object)>();
            if (objectAsParameter)
                result.Add((parameterName, obj));
            else
            {
                var objectProperties = obj.GetType().GetProperties();
                foreach (var objectProperty in objectProperties)
                {
                    if (objectProperty.CustomAttributes.Any(data => data.AttributeType == typeof(ExpandToParametersAttribute)))
                    {
                        var propertyParameters = objectProperty.GetValue(obj).ToODataParametersList();
                        result.AddRange(propertyParameters);
                    }
                    else
                        result.Add((objectProperty.Name, objectProperty.GetValue(obj)));
                }
            }
            return result;
        }
        #endregion

        #region ValidateModel
        internal static ODataStandartResponse ValidateModel<T>(this T obj) where T : class
        {
            var result = new ODataStandartResponse { ErrorCode = "OK" };
            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(obj);
            if (!Validator.TryValidateObject(obj, validationContext, validationResults, true))
            {
                var errors = new StringBuilder();
                foreach (var validationError in validationResults)
                    errors.AppendLine(validationError.ErrorMessage);
                result.ErrorCode = "Validation";
                result.ErrorMessage = errors.ToString();
            }

            return result;
        }
        #endregion

        #region Generic call Odata methods

        #region CallOdataMethodWithVoidResultAsync
        internal static async Task<ODataStandartResponse> CallOdataMethodWithVoidResultAsync<TModel>(this WSCAVEntities1 container, string entityName, string methodName, TModel model, bool excludeNullParameters = false, bool modelAsParameter = false, params (string, object)[] additionalParameters) where TModel : class
        {
            if (model == null)
                return new ODataStandartResponse { ErrorCode = "Validation", ErrorMessage = $"Data model with type \"{entityName}{methodName}Model\" is null." };
            var parameters = model.ToODataParametersList(modelAsParameter);
            foreach (var additionalParameter in additionalParameters)
                parameters.Add(additionalParameter);
            if (excludeNullParameters)
                parameters.RemoveAll(p => p.ParameterValue == null);
            try
            {
                var validationResult = model.ValidateModel();
                if (validationResult.ErrorCode != "OK")
                    return validationResult;
                var odataResponse = await container
                    .CallFunctionWithVoidResultAsync(entityName, methodName, parameters);
                return odataResponse;
            }
            catch (Exception ex)
            {
                return new ODataStandartResponse { ErrorCode = "Exception", ErrorMessage = ex.Message };
            }
        }
        #endregion

        #region CallOdataMethodWithSingleResultAsync
        internal static async Task<(ODataStandartResponse OdataResponse, TResult ODataResult)> CallOdataMethodWithSingleResultAsync<TResult, TModel>(this WSCAVEntities1 container, string entityName, string methodName, HttpMethod httpMethod, TModel model, bool excludeNullParameters = false, bool modelAsParameter = false, params (string, object)[] additionalParameters) where TModel : class
        {
            if (model == null)
                return (new ODataStandartResponse { ErrorCode = "Validation", ErrorMessage = $"Data model with type \"{entityName}{methodName}Model\" is null." }, default(TResult));
            var parameters = model.ToODataParametersList(modelAsParameter);
            foreach (var additionalParameter in additionalParameters)
                parameters.Add(additionalParameter);
            if (excludeNullParameters)
                parameters.RemoveAll(p => p.ParameterValue == null);
            try
            {
                var validationResult = model.ValidateModel();
                if (validationResult.ErrorCode != "OK")
                    return (validationResult, default(TResult));
                var odataResult = default(TResult);
                var customerOdataResponse = new ODataStandartResponse();
                (customerOdataResponse, odataResult) = await container
                    .CallFunctionWithSingleResultAsync<TResult>(entityName, methodName, httpMethod, parameters);     
                return (customerOdataResponse, odataResult);
            }
            catch (Exception ex)
            {
                return (new ODataStandartResponse { ErrorCode = "Exception", ErrorMessage = ex.Message }, default(TResult));
            }
        }
        #endregion

        #region CallOdataMethodWithMultipleResultAsync
        internal static async Task<(ODataStandartResponse OdataResponse, IEnumerable<TResult> ODataResults)> CallOdataMethodWithMultipleResultAsync<TResult, TModel>(this WSCAVEntities1 container, string entityName, string methodName, HttpMethod httpMethod, TModel model = null, bool excludeNullParameters = false, bool modelAsParameter = false, params (string, object)[] additionalParameters) where TModel : class
        {
            if (model == null)
                return (new ODataStandartResponse { ErrorCode = "Validation", ErrorMessage = $"Data model with type \"{entityName}{methodName}Model\" is null." }, default(IEnumerable<TResult>));
            var parameters = model.ToODataParametersList(modelAsParameter);
            foreach (var additionalParameter in additionalParameters)
                parameters.Add(additionalParameter);
            if (excludeNullParameters)
                parameters.RemoveAll(p => p.ParameterValue == null);
            try
            {
                var validationResult = model.ValidateModel();
                if (validationResult.ErrorCode != "OK")
                    return (validationResult, default(IEnumerable<TResult>));
                var odataResult = default(IEnumerable<TResult>);
                var odataResponse = new ODataStandartResponse();
                (odataResponse, odataResult) = await container
                    .CallFunctionWithMultipleResultAsync<TResult>(entityName, methodName, httpMethod, parameters);
                return (odataResponse, odataResult);
            }
            catch (Exception ex)
            {
                return (new ODataStandartResponse { ErrorCode = "Exception", ErrorMessage = ex.Message }, default(IEnumerable<TResult>));
            }
        }
        #endregion

        #endregion

        #region Work with exceptions from OData response
        internal static Exception GetInnerException(ref Exception exception)
        {
            if (exception == null)
                return null;

            while (exception.InnerException != null)
                exception = exception.InnerException;

            return exception;
        }

	    internal static ODataStandartResponse GetOdataStandartResponse(Exception ex)
	    {
	        var response = new ODataStandartResponse {ErrorCode = "-1"};

	        var innerException = GetInnerException(ref ex);
	        using (TextReader textReader = new StringReader(innerException.Message))
	        {
	            try
	            {
	                if (new XmlSerializer(typeof(ODataException)).Deserialize(textReader) is ODataException odataException)
	                {
	                    response.ErrorCode = odataException.ErrorCode;
	                    response.ErrorMessage = odataException.ErrorMessage.Value;
	                }
	                else
	                {
	                    response.ErrorCode = "-1";
	                    response.ErrorMessage = innerException.Message;
	                }
	            }
	            catch
	            {
	                response.ErrorCode = "-1";
	                response.ErrorMessage = innerException.Message;
	            }
	        }

	        return response;
        }

	    [XmlType(AnonymousType = true, Namespace = "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata")]
	    [XmlRoot(ElementName = "error", Namespace = "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata", IsNullable = false)]
	    public class ODataException
	    {
	        [XmlElement("code")]
	        public string ErrorCode { get; set; }

	        [XmlElement("message")]
	        public ODataErrorMessage ErrorMessage { get; set; }

	        [XmlElement("innererror")]
	        public ODataInternalException InnerException { get; set; }
	    }

	    [XmlType(AnonymousType = true, Namespace = "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata")]
	    public class ODataErrorMessage
	    {
	        [XmlAttribute(AttributeName = "lang", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
	        public string Language { get; set; }

	        [XmlText]
	        public string Value { get; set; }
	    }

	    [XmlType(AnonymousType = true, Namespace = "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata")]
	    public class ODataInternalException
	    {
	        [XmlElement("message")]
	        public string Message { get; set; }

	        [XmlElement("type")]
	        public string Type { get; set; }

	        [XmlElement("stacktrace")]
	        public string StackTrace { get; set; }

	        [XmlElement("internalexception")]
	        public ODataInternalException InternalException { get; set; }
	    }
        #endregion

		#region AddGetQueryFunction
        internal static DataServiceQuery<TResult> AddGetQueryFunction<TResult>(this WSCAVEntities1 container, string entityName, string functionName)
        {
            return container.CreateQuery<TResult>($"{entityName}/{functionName}");
        }
		#endregion

        #region AddQueryFunction
        internal static WSCAVEntities1 AddQueryFunction(this WSCAVEntities1 container, string entityName, string functionName)
        {
            container.ProcedureName = $"{entityName}/{functionName}";
            return container;
        }
        #endregion
		
        #region AddGetQueryOptions
        internal static DataServiceQuery<TResult> AddGetQueryOptions<TResult>(this DataServiceQuery<TResult> query, params (string, object)[] options)
        {
            foreach (var (optionName, optionValue) in options)
            {
                switch (optionValue)
                {
                    case string _:
                    case Guid _:
                        query = query.AddQueryOption(optionName, optionValue != null ? $"'{optionValue}'" : null);
                        break;
                    default:
                        query = query.AddQueryOption(optionName, optionValue);
                        break;
                }
            }

            return query;
        }

        internal static DataServiceQuery<TResult> AddGetQueryOptions<TResult>(this DataServiceQuery<TResult> query, IEnumerable<(string, object)> options)
        {
            foreach (var (optionName, optionValue) in options)
            {
                switch (optionValue)
                {
                    case string _:
                    case Guid _:
                        query = query.AddQueryOption(optionName, optionValue != null ? $"'{optionValue}'" : null);
                        break;
                    default:
                        query = query.AddQueryOption(optionName, optionValue);
                        break;
                }
            }

            return query;
        }

        internal static DataServiceQuery<TResult> AddGetQueryOptions<TResult>(this DataServiceQuery<TResult> query, Dictionary<string, object> options)
        {
            foreach (var option in options)
            {
                switch (option.Value)
                {
                    case string _:
                    case Guid _:
                        query = query.AddQueryOption(option.Key, option.Value != null ? $"'{option.Value}'" : null);
                        break;
                    default:
                        query = query.AddQueryOption(option.Key, option.Value);
                        break;
                }
            }

            return query;
        }
        #endregion
		
        #region AddQueryOptions
        internal static WSCAVEntities1 AddQueryOptions(this WSCAVEntities1 container, params (string, object)[] options)
        {
            foreach (var (optionName, optionValue) in options)
            {
                container.OperationParameters.Add(new BodyOperationParameter(optionName, optionValue));
            }

            return container;
        }

        internal static WSCAVEntities1 AddQueryOptions(this WSCAVEntities1 container, IEnumerable<(string, object)> options)
        {
            foreach (var (optionName, optionValue) in options)
            {
                container.OperationParameters.Add(new BodyOperationParameter(optionName, optionValue));
            }

            return container;
        }

        internal static WSCAVEntities1 AddQueryOptions(this WSCAVEntities1 container, Dictionary<string, object> options)
        {
            foreach (var option in options)
            {
                container.OperationParameters.Add(new BodyOperationParameter(option.Key, option.Value));
            }

            return container;
        }
        #endregion

		#region ExecuteAsync (GET)
        internal static async Task<(ODataStandartResponse, IEnumerable<TResult>)> ExecuteAsync<TResult>(this DataServiceQuery<TResult> query)
        {
            var response = new ODataStandartResponse();

            try
            {
                var answers = await Task.Factory.FromAsync(query.BeginExecute(null, null),
                    (queryAsyncResult) =>
                    {
                        var results = query.EndExecute(queryAsyncResult);
                        return results;
                    });

                return (response, answers);
            }
            catch (Exception ex)
            {
                return (GetOdataStandartResponse(ex), null);
            }
        }
        #endregion

        #region ExecuteWithMultipleResultAsync
        internal static async Task<(ODataStandartResponse, IEnumerable<TResult>)> ExecuteWithMultipleResultAsync<TResult>(this WSCAVEntities1 container, HttpMethod httpMethod)
        {
            var response = new ODataStandartResponse();

            try
            {
                var actionUri = new Uri($"{container.BaseUri}/{container.ProcedureName}");
                if (container.OperationParameters.Count > 0)
                {
                    var answers = await Task.Factory.FromAsync(container.BeginExecute<TResult>(actionUri, null, null, httpMethod.ToString(), false, container.OperationParameters.ToArray()),
                        (queryAsyncResult) =>
                        {
                            var results = container.EndExecute<TResult>(queryAsyncResult);
                            return results;
                        });

                    return (response, answers);
                }
                else
                {
                    var answers = await Task.Factory.FromAsync(container.BeginExecute<TResult>(actionUri, null, null, httpMethod.ToString(), false),
                        (queryAsyncResult) =>
                        {
                            var results = container.EndExecute<TResult>(queryAsyncResult);
                            return results;
                        });

                    return (response, answers);
                }
            }
            catch (Exception ex)
            {
                return (GetOdataStandartResponse(ex), null);
            }
			finally
			{
				container.InitProperties();
			}
        }
        #endregion

        #region ExecuteWithSingleResultAsync
        internal static async Task<(ODataStandartResponse, TResult)> ExecuteWithSingleResultAsync<TResult>(this WSCAVEntities1 container, HttpMethod httpMethod)
        {
            var response = new ODataStandartResponse();

            try
            {
                var actionUri = new Uri($"{container.BaseUri}/{container.ProcedureName}");
                if (container.OperationParameters.Count > 0)
                {
                    var answers = await Task.Factory.FromAsync(container.BeginExecute<TResult>(actionUri, null, null, httpMethod.ToString(), true, container.OperationParameters.ToArray()),
                        (queryAsyncResult) =>
                        {
                            var results = container.EndExecute<TResult>(queryAsyncResult);
                            return results;
                        });

                    return (response, answers.FirstOrDefault());
                }
                else
                {
                    var answers = await Task.Factory.FromAsync(container.BeginExecute<TResult>(actionUri, null, null, httpMethod.ToString(), true),
                        (queryAsyncResult) =>
                        {
                            var results = container.EndExecute<TResult>(queryAsyncResult);
                            return results;
                        });

                    return (response, answers.FirstOrDefault());
                }
            }
            catch (Exception ex)
            {
                return (GetOdataStandartResponse(ex), default(TResult));
            }
			finally
			{
				container.InitProperties();
			}
        }
        #endregion

		#region ExecuteWithVoidResultAsync
	    internal static async Task<ODataStandartResponse> ExecuteWithVoidResultAsync(this WSCAVEntities1 container)
	    {
	        var response = new ODataStandartResponse();

	        try
	        {
	            var actionUri = new Uri($"{container.BaseUri}/{container.ProcedureName}");
	            if (container.OperationParameters.Count > 0)
	            {
	                var answers = await Task.Factory.FromAsync(container.BeginExecute(actionUri, null, null, "POST", container.OperationParameters.ToArray()),
	                    (queryAsyncResult) =>
	                    {
	                        var results = container.EndExecute(queryAsyncResult);
	                        return results;
	                    });

	                return response;
	            }
	            else
	            {
	                var answers = await Task.Factory.FromAsync(container.BeginExecute(actionUri, null, null, "POST"),
	                    (queryAsyncResult) =>
	                    {
	                        var results = container.EndExecute(queryAsyncResult);
	                        return results;
	                    });

	                return response;
	            }
	        }
	        catch (Exception ex)
	        {
	            return GetOdataStandartResponse(ex);
	        }
	        finally
	        {
	            container.InitProperties();
	        }
	    }
	    #endregion

		#endregion

		#region Public methods

        #region SaveChangesAsync (POST)
        public static async Task<(ODataStandartResponse, DataServiceResponse)> SaveChangesAsync(this WSCAVEntities1 container, SaveChangesOptions options)
        {
            var response = new ODataStandartResponse();
            try
            {
                var answers = await Task.Factory.FromAsync(container.BeginSaveChanges(options, null, null),
                    (queryAsyncResult) =>
                    {
                        var results = container.EndSaveChanges(queryAsyncResult);
                        return results;
                    });

                return (response, answers);
            }
            catch (Exception ex)
            {
                return (GetOdataStandartResponse(ex), null);
            }
        }
        #endregion

		#region CallFunctionWithVoidResultAsync
        public static async Task<ODataStandartResponse> CallFunctionWithVoidResultAsync(this WSCAVEntities1 container, string entityName, string functionName, params (string, object)[] options)
        {
            var resultResponse = await container
                .AddQueryFunction(entityName, functionName)
                .AddQueryOptions(options)
                .ExecuteWithVoidResultAsync();
            return resultResponse;
        }

        public static async Task<ODataStandartResponse> CallFunctionWithVoidResultAsync(this WSCAVEntities1 container, string entityName, string functionName, IEnumerable<(string, object)> options)
        {
            var resultResponse = await container
                .AddQueryFunction(entityName, functionName)
                .AddQueryOptions(options)
                .ExecuteWithVoidResultAsync();
            return resultResponse;
        }

        public static async Task<ODataStandartResponse> CallFunctionWithVoidResultAsync(this WSCAVEntities1 container, string entityName, string functionName, Dictionary<string, object> options)
        {
            var resultResponse = await container
                .AddQueryFunction(entityName, functionName)
                .AddQueryOptions(options)
                .ExecuteWithVoidResultAsync();
            return resultResponse;
        }
        #endregion

        #region CallFunctionWithSingleResultAsync
        public static async Task<(ODataStandartResponse, TResult)> CallFunctionWithSingleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, params (string, object)[] options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithSingleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems != null ? resultItems.FirstOrDefault() : default(TResult));
            }

            return (new ODataStandartResponse(), default(TResult));
        }

        public static async Task<(ODataStandartResponse, TResult)> CallFunctionWithSingleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, IEnumerable<(string, object)> options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithSingleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems != null ? resultItems.FirstOrDefault() : default(TResult));
            }

            return (new ODataStandartResponse(), default(TResult));
        }

        public static async Task<(ODataStandartResponse, TResult)> CallFunctionWithSingleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, Dictionary<string, object> options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithSingleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems != null ? resultItems.FirstOrDefault() : default(TResult));
            }

            return (new ODataStandartResponse(), default(TResult));
        }
        #endregion

        #region CallFunctionWithMultipleResultAsync
        public static async Task<(ODataStandartResponse, IEnumerable<TResult>)> CallFunctionWithMultipleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, params (string, object)[] options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithMultipleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems);
            }

            return (new ODataStandartResponse(), default(IEnumerable<TResult>)); 
        }

        public static async Task<(ODataStandartResponse, IEnumerable<TResult>)> CallFunctionWithMultipleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, IEnumerable<(string, object)> options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithMultipleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems);
            }

            return (new ODataStandartResponse(), default(IEnumerable<TResult>));
        }

        public static async Task<(ODataStandartResponse, IEnumerable<TResult>)> CallFunctionWithMultipleResultAsync<TResult>(this WSCAVEntities1 container, string entityName, string functionName, HttpMethod httpMethod, Dictionary<string, object> options)
        {
            if (httpMethod == HttpMethod.POST)
            {
                var (resultResponse, resultItems) = await container
                    .AddQueryFunction(entityName, functionName)
                    .AddQueryOptions(options)
                    .ExecuteWithMultipleResultAsync<TResult>(httpMethod);
                return (resultResponse, resultItems);
            }
            else if (httpMethod == HttpMethod.GET)
            {
                var (resultResponse, resultItems) = await container
                    .AddGetQueryFunction<TResult>(entityName, functionName)
                    .AddGetQueryOptions(options)
                    .ExecuteAsync();
                return (resultResponse, resultItems);
            }

            return (new ODataStandartResponse(), default(IEnumerable<TResult>));
        }
        #endregion

		#endregion
	}

	public partial class WSCAVEntities1
    {
        #region Properties
        public string ProcedureName { get; set; } = null;

        public List<BodyOperationParameter> OperationParameters { get; set; } = new List<BodyOperationParameter>();
        #endregion

        #region Constructors
        public WSCAVEntities1() : this(new Uri("https://localhost:44357/WcfDataService1.svc/"))
        {
            this.InitProperties();
        }

		public void InitProperties()
		{
			this.ProcedureName = null;
            this.OperationParameters = new List<BodyOperationParameter>();
		}
        #endregion


    }
}